import net.darkhax.curseforgegradle.TaskPublishCurseForge

buildscript {
    repositories { mavenCentral() }

    dependencies {
        classpath("io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0")
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id "com.diffplug.spotless" version "6.22.0"
    id 'net.neoforged.gradle.userdev' version '7.0.26'
    id 'net.darkhax.curseforgegradle' version '1.1.16'
}

apply plugin: 'io.codearte.nexus-staging'

ext {
    dev_id = 'yusuf'
    dev_name = 'Yusuf Ismail'
    dev_email = 'ysufgamer222@gmail.com'
    dev_organization = 'Real Yusuf Ismail'
    dev_organizationUrl = 'https://github.com/RealYusufIsmail-Mc-Mods/RealYusufIsmail-Core-Neo'

    gpl_name = 'BSD 3-Clause "New" or "Revised" License'
    gpl_url = 'https://github.com/RealYusufIsmail-Mc-Mods/RealYusufIsmail-Core-Neo/LICENSE.txt'

    // Make sure we have a default for initial configuration evaluation
    isReleaseVersion = false
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

project.version = modVersion
project.group = 'io.github.realyusufismail'

// Mod name
base.archivesName.set('realyusufismailcore-neoforge')

description = "RealYusuf Ismail's Core. The main library for all my Minecraft mod."

final var modId = modId
final var mcVersion = mcVersion
final var projectId = projectId

def releaseVersion = !project.version.endsWith("SNAPSHOT")


// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

runs {
    configureEach {
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', modId
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', modId
        programArgument '--nogui'
    }

    gameTestServer {

        systemProperty 'forge.enabledGameTestNamespaces', modId
    }

    data {
        workingDirectory project.file('run-data')

        programArguments.addAll '--mod', modId, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}

dependencies {
    implementation  "net.neoforged:neoforge:${neoVersion}"
    //Logger
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.8'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.4.8'
    //test
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
}

test {
    useJUnitPlatform()
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : mcVersion, minecraft_version_range: '[1.20.2,1.21)',
            neo_version         : neoVersion, neo_version_range: '[20.2,)',
            loader_version_range: '[1,)',
            mod_id              : modId, mod_name: archivesBaseName, mod_license: 'BSD 3-Clause "New" or "Revised" License', mod_version: modVersion,
            mod_authors         : 'RealYusufIsmail', mod_description: description, pack_format_number: '18',
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

configurations.configureEach {
    //noinspection GrUnresolvedAccess
    // ez vulnerability fix
    exclude group: "org.slf4j", module: "slf4j-log4j12"
}

afterEvaluate { project ->
    ext.isReleaseVersion = !version.endsWith("RELEASE")
}

compileJava {
    // Makes spotlessApply task run on every compile/build.
    dependsOn 'spotlessApply'

    // Nails the Java-Version of every Subproject
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

spotless {
    java {
        // Excludes build folder since it contains generated java classes.
        targetExclude("build/**")
        eclipse('4.19.0').configFile("${rootProject.rootDir}/meta/formatting/google-style-eclipse.xml")
    }
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO
    }

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    def isReleaseVersion = !version.toString().endsWith("SNAPSHOT")
    publications {
        mavenJava(MavenPublication) {
            //artifactId = project.artifactId // or maybe archiveBaseName?
            from components.java
            pom {
                name = project.archivesBaseName
                description = project.description
                url = "https://github.com/RealYusufIsmail-Mc-Mods/RealYusufIsmail-Core-Neo"
                packaging = "jar"

                licenses {
                    license {
                        name = "${gpl_name}"
                        url = "${gpl_url}"
                    }
                }
                developers {
                    developer {
                        id = "${dev_id}"
                        name = "${dev_name}"
                        email = "${dev_email}"
                        organization = "${dev_organization}"
                        organizationUrl = "${dev_organizationUrl}"
                    }
                }
                scm {
                    connection = 'https://github.com/RealYusufIsmail-Mc-Mods/RealYusufIsmail-Core-Neo.git'
                    developerConnection = 'scm:git:ssh://git@github.com/RealYusufIsmail-Mc-Mods/RealYusufIsmail-Core-Neo.git'
                    url = 'github.com/RealYusufIsmail-Mc-Mods/RealYusufIsmail-Core-Neo'
                }
            }
        }
    }
    repositories {
        maven {
            name = "MavenCentral"
                def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = (isReleaseVersion) ? releaseRepo : snapshotRepo

                credentials {
                    username = project.hasProperty('MAVEN_USERNAME') ? ossrhUsername : "Unknown user"
                    password = project.hasProperty('MAVEN_PASSWORD') ? ossrhPassword : "Unknown password"
                }
            }
    }
}

//For future reference if issue occurs with signing just put secret-keys.gpg locally and update main gradle.properties accordingly.
signing {
    afterEvaluate { project ->
        def isReleaseVersion = releaseVersion && gradle.taskGraph.hasTask("publish")
        setRequired(isReleaseVersion)
        sign(publishing.publications.mavenJava)
    }
}

nexusStaging {
    packageGroup = 'io.github.realyusufismail'
    serverUrl = "https://s01.oss.sonatype.org/service/local"
    username = project.hasProperty('MAVEN_USERNAME') ? project.property('MAVEN_USERNAME') : 'username'
    password = project.hasProperty('MAVEN_PASSWORD') ? project.property('MAVEN_PASSWORD') : 'password'
}


tasks.register('publishCurseForge', TaskPublishCurseForge) {
    group = "CurseForge"
    dependsOn("build")
    disableVersionDetection()

    var token = project.hasProperty('curseforge.token') ? project.property('curseforge.token') as String : ""
    apiToken = token

    final var jar = file("build/libs/${base.archivesName.get()}-${project.version}.jar")

    final var mainFile = upload(projectId, jar)
    mainFile.changelog = file("CHANGELOG.md").getText()
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.addJavaVersion("Java 17")
    mainFile.addModLoader("NeoForge")
    mainFile.addGameVersion(mcVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}